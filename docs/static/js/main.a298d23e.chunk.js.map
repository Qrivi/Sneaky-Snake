{"version":3,"sources":["Snake.js","Apple.js","Score.js","Overlay.js","App.js","update.js","store.js","index.js"],"names":["connect","state","snake","_ref","react_default","a","createElement","id","map","part","key","x","y","className","style","left","top","apple","score","gameState","src_Apple","src_Snake","src_Overlay","src_Score","isEqualPosition","position1","position2","update","position","direction","nextPos","length","randomPosition","includes","Math","floor","random","Object","objectSpread","concat","some","slice","initialState","changeDirection","type","payload","store","createStore","action","didInvertDirection","ReactDOM","render","es","Store","src_App_0","document","getElementById","onkeydown","e","window","event","which","dispatch","init","getState","delay","setTimeout"],"mappings":"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","file":"static/js/main.a298d23e.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Snake = ({ snake }) => (\n    <div id=\"snake\">\n        {snake.map(\n            part => <div key={part.x + \"_\" + part.y} className=\"snakepart\" style={{ left: part.x * 10 + 'px', top: part.y * 10 + 'px' }}></div>\n        )}\n    </div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    snake: state.snake\n})\n\n// connect\nexport default connect(mapStateToProps)(Snake)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Apple = ({ x, y }) => (\n    <div id=\"apple\" style={{ left: x * 10 + 'px', top: y * 10 + 'px' }}></div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    x: state.apple.x,\n    y: state.apple.y\n})\n\n// connect\nexport default connect(mapStateToProps)(Apple)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Score = ({score}) => (\n    <div id=\"score\">\n        SCORE: <span>{score}</span>\n    </div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    score: state.score\n})\n\n// connect\nexport default connect(mapStateToProps)(Score)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Overlay = ({ gameState }) => {\n    switch (gameState) {\n        case 'paused':\n            return (\n                <div id=\"overlay\">\n                    <span>Game Paused</span>\n                    press space to <br /> continue playing\n                </div>\n            )\n        case 'over':\n            return (\n                <div id=\"overlay\">\n                    <span>Game Over</span>\n                    press space to <br /> start a new game\n                </div>\n            )\n        default:\n            return null\n    }\n}\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    gameState: state.gameState\n})\n\n// connect\nexport default connect(mapStateToProps)(Overlay)\n","import React from 'react';\nimport './App.css';\nimport Snake from './Snake'\nimport Apple from './Apple'\nimport Score from './Score'\nimport Overlay from './Overlay'\nimport { connect } from 'react-redux'\n\nconst App = () => (\n  <div id=\"App\">\n    <h1>Snake</h1>\n    <div id=\"field\">\n      <Apple />\n      <Snake />\n      <Overlay />\n    </div>\n    <div id=\"meta\">\n      <Score />\n    </div>\n  </div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n  gameState: state.gameState\n})\n\n// connect\nexport default connect(mapStateToProps)(App)\n","function nextPosition(position, direction) {\n    if (direction === 'right') {\n        return {\n            x: position.x + 1,\n            y: position.y,\n        }\n    }\n    if (direction === 'left') {\n        return {\n            x: position.x - 1,\n            y: position.y,\n        }\n    }\n    if (direction === 'up') {\n        return {\n            x: position.x,\n            y: position.y - 1,\n        }\n    }\n    if (direction === 'down') {\n        return {\n            x: position.x,\n            y: position.y + 1,\n        }\n    }\n}\n\nfunction isEqualPosition(position1, position2) {\n    return position1.x === position2.x && position1.y === position2.y\n}\n\nfunction update(state) {\n    // console.log(\"state:\", state)\n    const nextPos = nextPosition(state.snake[state.snake.length - 1], state.direction)\n\n    // eats apple\n    if (isEqualPosition(nextPos, state.apple)) {\n        let randomPosition\n\n        while (!randomPosition || isEqualPosition(state.apple, randomPosition) || state.snake.includes(randomPosition))\n            randomPosition = { x: Math.floor(Math.random() * 40), y: Math.floor(Math.random() * 40) }\n\n        return {\n            ...state,\n            score: state.score + 1,\n            apple: randomPosition,\n            snake: state.snake.concat(nextPos)\n        }\n    }\n\n    // suicidal snake\n    if (state.snake.some(part => isEqualPosition(part, nextPos))) {\n        return {\n            ...state,\n            gameState: 'over',\n        }\n    }\n\n    // snake hugs wall\n    if (nextPos.x >= 40 || nextPos.y >= 40 || nextPos.x < 0 || nextPos.y < 0) {\n        return {\n            ...state,\n            gameState: 'over',\n        }\n    }\n\n    // snake moves\n    return {\n        ...state,\n        snake: (state.snake.concat(nextPos)).slice(1)\n    }\n}\n\nexport default update\n","import { createStore } from 'redux'\nimport update from './update';\n\n//state\nconst initialState = {\n    score: 0,\n    snake: [{ x: 1, y: 25, }, { x: 2, y: 25, }, { x: 3, y: 25, }],\n    apple: { x: 10, y: 25 },\n    direction: 'right',\n    gameState: 'paused',\n}\n\n//actions\nexport function changeDirection(direction) {\n    return { type: 'CHANGE_DIRECTION', payload: direction }\n}\n\nexport function toggleGameState() {\n    return { type: 'TOGGLE_GAMESTATE', }\n}\n\nexport function gameOver() {\n    return { type: 'GAME_OVER', }\n}\n\nexport function tickTick() {\n    return { type: 'TICK_TICK', }\n}\n\n//reducer\nfunction reducer(state, action) {\n    if (action.type === 'CHANGE_DIRECTION') {\n        const didInvertDirection = (state.direction === 'left' && action.payload === 'right')\n            || (state.direction === 'right' && action.payload === 'left')\n            || (state.direction === 'down' && action.payload === 'up')\n            || (state.direction === 'up' && action.payload === 'down')\n\n        return {\n            ...state,\n            direction: state.gameState === 'playing' && !didInvertDirection ? action.payload : state.direction\n        }\n    }\n\n    if (action.type === 'TOGGLE_GAMESTATE') {\n        switch (state.gameState) {\n            case 'over':\n                return update({\n                    ...initialState,\n                    gameState: 'playing',\n                })\n            case 'playing':\n                return {\n                    ...state,\n                    gameState: 'paused',\n                }\n            default:\n                return update({\n                    ...state,\n                    gameState: 'playing',\n                })\n        }\n    }\n\n    if (action.type === 'GAME_OVER') {\n        return {\n            ...state,\n            gameState: 'over',\n        }\n    }\n\n    if (action.type === 'TICK_TICK') {\n        return update(state)\n    }\n\n    return state\n}\n\n//store\nconst store = createStore(reducer, initialState)\n\n// test\n// store.subscribe(function () {\n//     console.log(\"Updated store, new state:\", store.getState())\n// })\n\n//export\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport Store, { changeDirection, toggleGameState, tickTick } from './store'\n\nReactDOM.render(<Provider store={Store}><App /></Provider>, document.getElementById('root'));\n\nconst checkKey = (e) => {\n    e = e || window.event;\n\n    if (e.which === 38) { // up arrow\n        return Store.dispatch(changeDirection('up'))\n    }\n    if (e.which === 40) { // down arrow\n        return Store.dispatch(changeDirection('down'))\n    }\n    if (e.which === 37) { // left arrow\n        return Store.dispatch(changeDirection('left'))\n    }\n    if (e.which === 39) { // right arrow\n        return Store.dispatch(changeDirection('right'))\n    }\n    if (e.which === 32) { // space bar\n        return Store.dispatch(toggleGameState())\n    }\n}\n\nconst init = () => {\n    const state = Store.getState()\n    const delay = 200 - Math.floor(state.score / 10) * 10\n    setTimeout(init, delay)\n    if (state.gameState === 'playing')\n        Store.dispatch(tickTick())\n}\n\ndocument.onkeydown = checkKey;\ninit()\n"],"sourceRoot":""}