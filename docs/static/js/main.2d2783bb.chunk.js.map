{"version":3,"sources":["Snake.js","Apple.js","Score.js","Overlay.js","App.js","update.js","store.js","index.js"],"names":["connect","state","snake","id","map","part","className","style","left","x","top","y","apple","score","gameState","randomPosition","Math","floor","random","isEqualPosition","position1","position2","update","position","direction","nextPos","length","nextApple","some","concat","slice","initialState","changeDirection","type","payload","store","createStore","action","didInvertDirection","ReactDOM","render","Store","document","getElementById","onkeydown","e","window","event","which","dispatch","onblur","getState","play","delay","setTimeout"],"mappings":"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","file":"static/js/main.2d2783bb.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Snake = ({ snake }) => (\n    <div id=\"snake\">\n        {snake.map(\n            part => <div key={part.x + \"_\" + part.y} className=\"snakepart\" style={{ left: part.x * 10 + 'px', top: part.y * 10 + 'px' }}></div>\n        )}\n    </div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    snake: state.snake\n})\n\n// connect\nexport default connect(mapStateToProps)(Snake)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Apple = ({ x, y }) => (\n    <div id=\"apple\" style={{ left: x * 10 + 'px', top: y * 10 + 'px' }}></div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    x: state.apple.x,\n    y: state.apple.y\n})\n\n// connect\nexport default connect(mapStateToProps)(Apple)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Score = ({score}) => (\n    <div id=\"score\">\n        SCORE: <span>{score}</span>\n    </div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    score: state.score\n})\n\n// connect\nexport default connect(mapStateToProps)(Score)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// component\nconst Overlay = ({ gameState }) => {\n    switch (gameState) {\n        case 'paused':\n            return (\n                <div id=\"overlay\">\n                    <span>Game Paused</span>\n                    press space to <br /> continue playing\n                </div>\n            )\n        case 'over':\n            return (\n                <div id=\"overlay\">\n                    <span>Game Over</span>\n                    press space to <br /> start a new game\n                </div>\n            )\n        default:\n            return null\n    }\n}\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n    gameState: state.gameState\n})\n\n// connect\nexport default connect(mapStateToProps)(Overlay)\n","import React from 'react';\nimport './App.css';\nimport Snake from './Snake'\nimport Apple from './Apple'\nimport Score from './Score'\nimport Overlay from './Overlay'\nimport { connect } from 'react-redux'\n\nconst App = () => (\n  <div id=\"App\">\n    <h1>Snake</h1>\n    <div id=\"field\">\n      <Apple />\n      <Snake />\n      <Overlay />\n    </div>\n    <div id=\"meta\">\n      <Score />\n    </div>\n  </div>\n)\n\n// StateToProps\nconst mapStateToProps = (state) => ({\n  gameState: state.gameState\n})\n\n// connect\nexport default connect(mapStateToProps)(App)\n","function randomPosition() {\n    return {\n        x: Math.floor(Math.random() * 40),\n        y: Math.floor(Math.random() * 40),\n    }\n}\n\nfunction nextPosition(position, direction) {\n    if (direction === 'right') {\n        return {\n            x: position.x + 1,\n            y: position.y,\n        }\n    }\n    if (direction === 'left') {\n        return {\n            x: position.x - 1,\n            y: position.y,\n        }\n    }\n    if (direction === 'up') {\n        return {\n            x: position.x,\n            y: position.y - 1,\n        }\n    }\n    if (direction === 'down') {\n        return {\n            x: position.x,\n            y: position.y + 1,\n        }\n    }\n}\n\nfunction isEqualPosition(position1, position2) {\n    return position1.x === position2.x && position1.y === position2.y\n}\n\nfunction update(state) {\n    // console.log(\"state:\", state)\n    const nextPos = nextPosition(state.snake[state.snake.length - 1], state.direction)\n\n    // eats apple\n    if (isEqualPosition(nextPos, state.apple)) {\n        let nextApple = randomPosition()\n        // eslint-disable-next-line no-loop-func\n        while (state.snake.some(part => isEqualPosition(nextApple, part)) || isEqualPosition(nextApple, state.apple))\n            nextApple = randomPosition()\n\n        return {\n            ...state,\n            score: state.score + 1,\n            apple: nextApple,\n            snake: state.snake.concat(nextPos)\n        }\n    }\n\n    // suicidal snake\n    if (state.snake.some(part => isEqualPosition(part, nextPos))) {\n        return {\n            ...state,\n            gameState: 'over',\n        }\n    }\n\n    // snake hugs wall\n    if (nextPos.x >= 40 || nextPos.y >= 40 || nextPos.x < 0 || nextPos.y < 0) {\n        return {\n            ...state,\n            gameState: 'over',\n        }\n    }\n\n    // snake moves\n    return {\n        ...state,\n        snake: (state.snake.concat(nextPos)).slice(1)\n    }\n}\n\nexport default update\n","import { createStore } from 'redux'\nimport update from './update';\n\n//state\nconst initialState = {\n    score: 0,\n    snake: [{ x: 1, y: 25, }, { x: 2, y: 25, }, { x: 3, y: 25, }],\n    apple: { x: 10, y: 25 },\n    direction: 'right',\n    gameState: 'paused',\n}\n\n//actions\nexport function changeDirection(direction) {\n    return { type: 'CHANGE_DIRECTION', payload: direction }\n}\n\nexport function toggleGameState() {\n    return { type: 'TOGGLE_GAMESTATE', }\n}\n\nexport function gameOver() {\n    return { type: 'GAME_OVER', }\n}\n\nexport function forcePause() {\n    return { type: 'FORCE_PAUSE', }\n}\n\nexport function tickTick() {\n    return { type: 'TICK_TICK', }\n}\n\n//reducer\nfunction reducer(state, action) {\n    if (action.type === 'CHANGE_DIRECTION') {\n        const didInvertDirection = (state.direction === 'left' && action.payload === 'right')\n            || (state.direction === 'right' && action.payload === 'left')\n            || (state.direction === 'down' && action.payload === 'up')\n            || (state.direction === 'up' && action.payload === 'down')\n\n        return {\n            ...state,\n            direction: state.gameState === 'playing' && !didInvertDirection ? action.payload : state.direction\n        }\n    }\n\n    if (action.type === 'TOGGLE_GAMESTATE') {\n        switch (state.gameState) {\n            case 'over':\n                return {\n                    ...initialState,\n                    gameState: 'playing',\n                }\n            case 'playing':\n                return {\n                    ...state,\n                    gameState: 'paused',\n                }\n            default:\n                return {\n                    ...state,\n                    gameState: 'playing',\n                }\n        }\n    }\n\n    if (action.type === 'GAME_OVER') {\n        return {\n            ...state,\n            gameState: 'over',\n        }\n    }\n\n    if (action.type === 'FORCE_PAUSE') {\n        return {\n            ...state,\n            gameState: 'paused',\n        }\n    }\n\n    if (action.type === 'TICK_TICK') {\n        return update(state)\n    }\n\n    return state\n}\n\n//store\nconst store = createStore(reducer, initialState)\n\n// test\n// store.subscribe(function () {\n//     console.log(\"Updated store, new state:\", store.getState())\n// })\n\n//export\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport Store, { changeDirection, forcePause, toggleGameState, tickTick } from './store'\n\nReactDOM.render(<Provider store={Store}><App /></Provider>, document.getElementById('root'));\n\nconst checkKey = (e) => {\n    e = e || window.event;\n\n    if (e.which === 38) { // up arrow\n        return Store.dispatch(changeDirection('up'))\n    }\n    if (e.which === 40) { // down arrow\n        return Store.dispatch(changeDirection('down'))\n    }\n    if (e.which === 37) { // left arrow\n        return Store.dispatch(changeDirection('left'))\n    }\n    if (e.which === 39) { // right arrow\n        return Store.dispatch(changeDirection('right'))\n    }\n    if (e.which === 32) { // space bar\n        return Store.dispatch(toggleGameState())\n    }\n}\n\nconst pause = () => {\n    const state = Store.getState()\n    if (state.gameState === 'playing')\n        Store.dispatch(forcePause())\n}\n\nconst play = () => {\n    const state = Store.getState()\n    const delay = 200 - Math.floor(state.score / 10) * 10\n    setTimeout(play, delay)\n    if (state.gameState === 'playing')\n        Store.dispatch(tickTick())\n}\n\ndocument.onkeydown = checkKey\nwindow.onblur = pause\nplay()\n"],"sourceRoot":""}